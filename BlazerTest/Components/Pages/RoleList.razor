@page "/RoleList"
@attribute [Authorize(Roles = "RoleList")]
@using Application.IInfrastructure
@using Application.IService
@using Application.Interface
@using BlazerTest.Helper
@using Domain.Entites
@using Domain.Helper
@using Microsoft.AspNetCore.Authorization
@inject IRoleService _RoleService
@inject IUnitOfWork _UnitOfWork
@attribute [StreamRendering]
@rendermode InteractiveServer


<PageTitle>لیست نقش ها</PageTitle>
<Alert @ref="alertComponnent" />
<ConfirmationDialog IsVisible="@showConfirmationDialog" OnConfirm="HandleConfirm" />

<button class="btn btn-success my-1" @onclick="AddRole">
	<i class="bi bi-plus me-1"></i> افزودن
</button>
@if (Roles == null)
{
	<p>Loading...</p>
}
@if (Roles != null && IsEditMode == false)
{
	<table class="table table-striped table-hover table-bordered">
		<thead class="table-dark">
			<tr>
				<th> نام نقش</th>
				
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var role in Roles)
			{
				<tr>
					<td>@role.RoleName</td>

					<td>
						<button class="btn btn-primary btn-sm" @onclick="() => EditRole(role.Id)">ویرایش</button>
						<button class="btn btn-danger btn-sm ms-1" @onclick="() => ShowConfirmation(role.Id)">حذف</button>

					</td>
				</tr>
			}
		</tbody>
	</table>

}

@if (IsEditMode)
{
	<EditForm Model="@CurrentRole" OnValidSubmit="SaveRole">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label>نام نقش </label>
			<InputText class="form-control" @bind-Value="CurrentRole.RoleName" />
		</div>

		<button type="submit" class="btn btn-primary">Save</button>
		<button type="button" class="btn btn-secondary ms-2" @onclick="() => IsEditMode = false">Cancel</button>
	</EditForm>
}
@code {

	private List<Role>? Roles { get; set; } = new List<Role>();
	private Role? CurrentRole { get; set; } = new Role();
	private bool IsEditMode { get; set; } = false;
	private Alert alertComponnent;
	private bool showConfirmationDialog = false;
	private int roleIdToDelete;

	private void ShowConfirmation(int roleId)
	{
		roleIdToDelete = roleId;
		showConfirmationDialog = true;
	}
	private async Task HandleConfirm(bool confirmed)
	{
		if (confirmed)
		{
			await DeleteRole(roleIdToDelete);

			// همچنین می‌توانید کد لازم برای بروزرسانی لیست کاربران را اضافه کنید.
		}
		showConfirmationDialog = false;
	}


	protected override async Task OnInitializedAsync()
	{

		Roles = await _RoleService.GetAllAsync();

	}
	private void AddRole()
	{
		CurrentRole = new Role();
		IsEditMode = true;
	}

	private async Task EditRole(int roleId)
	{
		CurrentRole = await _RoleService.GetAsync(roleId);
		IsEditMode = true;
	}

	private async Task DeleteRole(int roleId)
	{
		try
		{
			_RoleService.Delete(new Role { Id = roleId });
			await _RoleService.SaveChangesAsync();
			await OnInitializedAsync();
		}
		catch (Exception ex)
		{
			alertComponnent.Show((ex?.Message) ?? "خطا", AlertColorEnum.Error);
		}
		
	}

	private async Task SaveRole()
	{
		try
		{

			if (CurrentRole.Id == 0)
			{
				

				await _RoleService.InsertAsync(CurrentRole);
				await _RoleService.SaveChangesAsync();
				alertComponnent.Show("عملیات با موفقیت انجام شد ", AlertColorEnum.Success);
			}
			else
			{
				
				_RoleService.Update(CurrentRole);
				await _RoleService.SaveChangesAsync();
				alertComponnent.Show("عملیات با موفقیت انجام شد ", AlertColorEnum.Success);
			}

			CurrentRole = null;
			await OnInitializedAsync(); // Refresh list
			IsEditMode = false;
		}
		catch (Exception ex)
		{
			alertComponnent.Show(ex?.Message ?? "خطا", AlertColorEnum.Error);
		}
	}
	
}
