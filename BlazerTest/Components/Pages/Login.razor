@page "/login"
@using Application.IService
@using BlazerTest.Helper
@using Domain.Entites
@using Domain.Helper
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@inject NavigationManager navigationManager
@inject IUserService _userService
@inject IUserRoleService _userRoleService
@inject IRolePermissionService _rolePermissionService



<PageTitle>صفحه ورود</PageTitle>

<div class="container mt-5">
	<h2>ورود به سیستم</h2>
	<EditForm Model="@loginModel" FormName="loginform" OnValidSubmit="HandleLogin">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="username"> شماره موبایل</label>
			<InputText id="username" class="form-control" @bind-Value="loginModel.MobileNumber" />
		</div>

		<div class="form-group">
			<label for="password">رمز عبور</label>
			<InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
		</div>

		<button type="submit" class="btn btn-primary my-2">ورود</button>
		@* <button type="button" class="btn btn-secondary ms-2" @onclick="Logout">خروج</button> *@
	</EditForm>
</div>

@code {
	[SupplyParameterFromForm]
	private LoginModel loginModel { get; set; }

	[CascadingParameter]
	private HttpContext? HttpContext { get; set; }

	protected override void OnInitialized() => loginModel ??= new();
	private async Task HandleLogin()
	{
		
			User? user = (await _userService.FindByConditionAsync(w => w.MobileNumber == loginModel.MobileNumber)).FirstOrDefault();
			if (user is not User || user?.Password != SecurityHelper.PasswordToSHA256(loginModel.Password))
			{
				return;
			};

			List<UserRole>? lstUserRole = await _userRoleService.FindByConditionAsync(w => w.UserId == user.Id);
			if (lstUserRole == null || lstUserRole.Count == 0)
			{
				navigationManager.NavigateTo("/");
				return;
			}

			List<RolePermission>? rolePermissions = await _rolePermissionService.FindByConditionAsync(w => lstUserRole.Select(s => s.RoleId).Contains(w.RoleId));
			if (rolePermissions == null || rolePermissions.Count == 0)
			{
				navigationManager.NavigateTo("/");
				return;
			}

			List<string>? lstPermission = rolePermissions?.Select(s => s.Permission.PageName).ToList();
			if (lstPermission == null || lstPermission.Count == 0)
			{
				navigationManager.NavigateTo("/");
				return;
			}

			var claims = new List<Claim>
			{
				new Claim(ClaimTypes.Name, user.FirstName + user.LastName),
				new Claim(ClaimTypes.MobilePhone, user.MobileNumber)
			};
			lstPermission?.ForEach(e => claims.Add(new Claim(ClaimTypes.Role, e)));
			var claimsIdentity = new ClaimsIdentity(claims, "BTAuth");
			var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);
			await HttpContext.SignInAsync(claimsPrincipal);
			navigationManager.NavigateTo("/");
		

	}

	private void Logout()
	{
		// Implement your logout logic here
		// For demonstration, just navigating to login page
		navigationManager.NavigateTo("/login");
	}

	public class LoginModel
	{
	
		public string MobileNumber { get; set; }
		
		public string Password { get; set; }
	}
}
